#!/bin/bash
# pre-commit hook for documentation validation
# This hook validates documentation before committing

# Get the absolute path of the script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(cd "$SCRIPT_DIR/../../.." && pwd)"
VALIDATE_SCRIPT="$ROOT_DIR/tools/doc-sync/validate-docs.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

echo "Running documentation validation..."

# Check if any documentation files are being committed
DOCS_CHANGED=$(git diff --cached --name-only | grep -E '^docs/.*\.(md|yaml|yml|mmd)$')
SCHEMA_CHANGED=$(git diff --cached --name-only | grep -E '^docs/schema/.*\.yaml$')
CODE_CHANGED=$(git diff --cached --name-only | grep -E '\.(sh|py|js|ts|go|java|c|cpp|h|hpp)$')

# If no documentation or code files are being committed, skip validation
if [[ -z "$DOCS_CHANGED" && -z "$CODE_CHANGED" ]]; then
    echo -e "${GREEN}No documentation or code files changed, skipping validation.${NC}"
    exit 0
fi

# If schema files are being changed, validate all documentation
if [[ -n "$SCHEMA_CHANGED" ]]; then
    echo -e "${YELLOW}Schema files changed, validating all documentation...${NC}"
    "$VALIDATE_SCRIPT" --warning-only
    VALIDATION_RESULT=$?
    
    if [[ $VALIDATION_RESULT -ne 0 ]]; then
        echo -e "${RED}Documentation validation failed!${NC}"
        echo -e "${YELLOW}You can bypass this check with git commit --no-verify, but this is not recommended.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}Documentation validation passed.${NC}"
    exit 0
fi

# If documentation files are being changed, validate them
if [[ -n "$DOCS_CHANGED" ]]; then
    echo -e "${YELLOW}Documentation files changed, validating...${NC}"
    "$VALIDATE_SCRIPT" --warning-only
    VALIDATION_RESULT=$?
    
    if [[ $VALIDATION_RESULT -ne 0 ]]; then
        echo -e "${RED}Documentation validation failed!${NC}"
        echo -e "${YELLOW}You can bypass this check with git commit --no-verify, but this is not recommended.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}Documentation validation passed.${NC}"
fi

# If code files are being changed, check if documentation needs to be updated
if [[ -n "$CODE_CHANGED" ]]; then
    echo -e "${YELLOW}Code files changed, checking if documentation needs to be updated...${NC}"
    
    # Check for shell script changes that might affect documentation
    SHELL_CHANGED=$(echo "$CODE_CHANGED" | grep -E '\.sh$')
    if [[ -n "$SHELL_CHANGED" ]]; then
        echo -e "${YELLOW}Shell scripts changed, consider updating the following documentation:${NC}"
        echo -e "${YELLOW}- docs/system/interfaces.yaml (for function changes)${NC}"
        echo -e "${YELLOW}- docs/system/components.yaml (for component changes)${NC}"
        echo -e "${YELLOW}- docs/system/relationships.yaml (for dependency changes)${NC}"
    fi
    
    # Check for Docker Compose file changes
    DOCKER_CHANGED=$(echo "$CODE_CHANGED" | grep -E 'docker-compose\.yml$')
    if [[ -n "$DOCKER_CHANGED" ]]; then
        echo -e "${YELLOW}Docker Compose files changed, consider updating the following documentation:${NC}"
        echo -e "${YELLOW}- docs/system/components.yaml${NC}"
        echo -e "${YELLOW}- docs/system/relationships.yaml${NC}"
        echo -e "${YELLOW}- docs/diagrams/deployment-architecture.mmd${NC}"
    fi
    
    # Prompt user to confirm documentation is up-to-date
    echo -e "${YELLOW}Have you updated the documentation to reflect your code changes? (y/n)${NC}"
    read -r response
    
    if [[ "$response" != "y" && "$response" != "Y" ]]; then
        echo -e "${RED}Please update the documentation before committing.${NC}"
        echo -e "${YELLOW}You can bypass this check with git commit --no-verify, but this is not recommended.${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}Pre-commit checks passed.${NC}"
exit 0